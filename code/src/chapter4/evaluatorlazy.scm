(define system-eval eval)
(define system-apply apply)

;; eval
(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (quote-content exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((and? exp) (eval (and->if exp) env))
        ((or? exp) (eval (or->if exp) env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp)
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
        ((let? exp) (eval (let->application exp) env))
        ((let*? exp) (eval (let*->let exp) env))
        ((letrec? exp) (eval (letrec->let exp) env))
        ((application? exp)
         (apply (actual-value (operator exp) env)
                (operands exp)
                env))
        (else
         (error "Unknown expression type -- eval" exp))))
(define (actual-value exp env)
  (force-it (eval exp env)))
(define (eval-with-analysis exp env)
  ((analyze exp) env))

;; analyze
(define (analyze exp)
  (cond ((self-evaluating? exp)
         (analyze-self-evaluating exp))
        ((variable? exp) (analyze-variable exp))
        ((quoted? exp) (analyze-quoted exp))
        ((assignment? exp) (analyze-assignment exp))
        ((definition? exp) (analyze-definition exp))
        ((if? exp) (analyze-if exp))
        ((and? exp) (analyze (and->if exp)))
        ((or? exp) (analyze (or->if exp)))
        ((lambda? exp) (analyze-lambda exp))
        ((begin? exp) (analyze-sequence (begin-actions exp)))
        ((cond? exp) (analyze (cond->if exp)))
        ((let? exp) (analyze (let->application exp)))
        ((let*? exp) (analyze (let*->let exp)))
        ((letrec? exp) (analyze (letrec->let exp)))
        ((application? exp) (analyze-application exp))
        (else
         (error "Unknown expression type -- analyze " exp))))

;; apply
(define (apply procedure arguments env)
  (cond ((primitive-procedure? procedure)
         (apply-primitive-procedure procedure
                                    (list-of-arg-values arguments env)))
        ((compound-procedure? procedure)
         (eval-sequence
           (procedure-body procedure)
           (extend-environment
             (procedure-parameters procedure)
             (list-of-delayed-args arguments env)
             (procedure-environment procedure))))
        (else
         (error "Unknown procedure type -- apply" procedure))))
(define (list-of-arg-values exps env)
  (if (no-exps? exps)
      '()
      (cons (actual-value (first-exp exps) env)
            (list-of-arg-values (rest-exps exps) env))))
(define (list-of-delayed-args exps env)
  (if (no-exps? exps)
      '()
      (cons (delay-it (first-exp exps) env)
            (list-of-delayed-args (rest-exps exps) env))))

;; thunk
(define (thunk? obj)
  (tagged-list? obj 'thunk))
(define (thunk-exp thunk) (cadr thunk))
(define (thunk-env thunk) (caddr thunk))
(define (evaluated-thunk? obj)
  (tagged-list? obj 'evaluated-thunk))
(define (thunk-value thunk)
  (cadr thunk))
(define (delay-it exp env)
  (list 'thunk exp env))
(define (force-it obj)
  (cond ((thunk? obj)
         (let ((value (actual-value (thunk-exp obj)
                                    (thunk-env obj))))
           (set-car! obj 'evaluated-thunk)
           (set-cdr! obj (list value))
           value))
        ((evaluated-thunk? obj)
         (thunk-value obj))
        (else obj)))
;; without memoization
; (define (force-it obj)
;   (if (thunk? obj)
;       (actual-value (thunk-exp obj)
;                     (thunk-env obj))
;       obj))

;; self-evaluating
(define (self-evaluating? exp)
  (or (number? exp)
      (string? exp)
      (null? exp)))
(define (analyze-self-evaluating exp)
  (lambda (env) exp))

;; variable
(define (variable? exp) (symbol? exp))
(define (analyze-variable exp)
  (lambda (env) (lookup-variable-value exp env)))

;; quotation
;; (quote content)
(define (quoted? exp) (tagged-list? exp 'quote))
(define (quote-content exp) (cadr exp))
(define (analyze-quoted exp)
  (let ((content (quote-content exp)))
    (lambda (env) content)))

;; assignment
;; (set! variable value)
(define (assignment? exp) (tagged-list? exp 'set!))
(define (assignment-variable exp) (cadr exp))
(define (assignment-value exp) (caddr exp))
(define (eval-assignment exp env)
  (set-variable-value! (assignment-variable exp)
                       (eval (assignment-value exp) env)
                       env))
(define (make-assignment variable value)
  (list 'set! variable value))
(define (analyze-assignment exp)
  (let ((var (assignment-variable exp))
        (analyzed-value (analyze (assignment-value exp))))
    (lambda (env)
      (set-variable-value! var
                           (analyzed-value env)
                           env))))

;; definition
;; (define variable value)
;; or
;; (define (var param0 param1 ... paramn) exp0 exp1 ... expn)
(define (definition? exp)
  (tagged-list? exp 'define))
(define (definition-variable exp)
  (if (symbol? (cadr exp))
      (cadr exp)
      (caadr exp)))
(define (definition-value exp)
  (if (symbol? (cadr exp))
      (caddr exp)
      (make-lambda (cdadr exp)
                   (cddr exp))))
(define (eval-definition exp env)
  (define-variable! (definition-variable exp)
                    (eval (definition-value exp) env)
                    env))
(define (analyze-definition exp)
  (let ((var (definition-variable exp))
        (analyzed-value (analyze (definition-value exp))))
    (lambda (env)
      (define-variable! var
                        (analyzed-value env)
                        env))))

;; conditional
;; (if predicate consequent alternative)
;; or
;; (if predicate consequent)
(define (if? exp) (tagged-list? exp 'if))
(define (if-predicate exp) (cadr exp))
(define (if-consequent exp) (caddr exp))
(define (if-alternative exp)
  (if (null? (cdddr exp))
      'undefined
      (cadddr exp)))
(define (make-if predicate consequent alternative)
  (list 'if predicate consequent alternative))
(define (eval-if exp env)
  (if (true? (actual-value (if-predicate exp) env))
      (eval (if-consequent exp) env)
      (eval (if-alternative exp) env)))
(define (analyze-if exp)
  (let ((analyzed-predicate (analyze (if-predicate exp)))
        (analyzed-consequent (analyze (if-consequent exp)))
        (analyzed-alternative (analyze (if-alternative exp))))
    (lambda (env)
      (if (true? (analyzed-predicate env))
          (analyzed-consequent env)
          (analyzed-alternative env)))))

;; and & or
(define (and? exp) (tagged-list? exp 'and))
(define (or? exp) (tagged-list? exp 'or))
(define (logic-clauses exp) (cdr exp))
(define (logic-no-clauses? clauses) (null? clauses))
(define (logic-first-clause clauses) (car clauses))
(define (logic-rest-clauses clauses) (cdr clauses))
(define (and->if exp)
  (define (expand-clauses clauses)
    (if (logic-no-clauses? clauses)
        'true
        (make-if (logic-first-clause clauses)
                 (expand-clauses (logic-rest-clauses clauses))
                 'false)))
  (expand-clauses (logic-clauses exp)))
(define (or->if exp)
  (define (expand-clauses clauses)
    (if (logic-no-clauses? clauses)
        'false
        (make-if (logic-first-clause clauses)
                 'true
                 (expand-clauses (logic-rest-clauses clauses)))))
  (expand-clauses (logic-clauses exp)))

;; lambda
;; (lambda (param0 param ... paramn) exp0 exp1 ... expn)
(define (lambda? exp) (tagged-list? exp 'lambda))
(define (lambda-parameters exp) (cadr exp))
(define (lambda-body exp) (cddr exp))
(define (make-lambda parameters body)
  (cons 'lambda (cons parameters body)))
(define (analyze-lambda exp)
  (let ((parameters (lambda-parameters exp))
        (analyzed-body (analyze-sequence (lambda-body exp))))
    (lambda (env) (make-procedure parameters
                                  analyzed-body
                                  env))))

;; sequence
;; (begin exp0 exp1 ... expn)
(define (begin? exp) (tagged-list? exp 'begin))
(define (begin-actions exp) (cdr exp))
(define (no-exps? seq) (null? seq))
(define (last-exp? seq) (null? (cdr seq)))
(define (first-exp seq) (car seq))
(define (rest-exps seq) (cdr seq))
(define (sequence->exp seq)
  (cond ((no-exps? seq) seq)
        ((last-exp? seq) (first-exp seq))
        (else (make-begin seq))))
(define (make-begin seq) (cons 'begin seq))
(define (eval-sequence exps env)
  (cond ((no-exps? exps)
         (error "Empty sequence -- eval-sequence"))
        ((last-exp? exps)
         (eval (first-exp exps) env))
        (else (eval (first-exp exps) env)
              (eval-sequence (rest-exps exps) env))))
(define (analyze-sequence exps)
  (define (sequentially proc1 proc2)
    (lambda (env) (proc1 env) (proc2 env)))
  (define (loop first-proc rest-procs)
    (if (null? rest-procs)
        first-proc
        (loop (sequentially first-proc (car rest-procs))
              (cdr rest-procs))))
  (let ((analyzed-exps (map analyze exps)))
    (if (null? analyzed-exps)
        (error "Empty sequence -- analyze-sequence")
        (loop (car analyzed-exps) (cdr analyzed-exps)))))

;; cond
;; (cond ((p0 e00 e01 ... e0n) (p1 e10 e11 ... e1n) ...))
(define (cond? exp) (tagged-list? exp 'cond))
(define (cond-clauses exp) (cdr exp))
(define (cond-else-clause? clause)
  (eq? (clause-predicate clause) 'else))
(define (clause-predicate clause) (car clause))
(define (clause-actions clause) (cdr clause))
(define (cond->if exp)
  (expand-clauses (cond-clauses exp)))
(define (expand-clauses clauses)
  (if (null? clauses)
      'undefined
      (let ((first (car clauses))
            (rest (cdr clauses)))
        (if (cond-else-clause? first)
            (if (null? rest)
                (sequence->exp (clause-actions first))
                (error "Else clause isn't last clause -- cond->if"))
            (make-if (clause-predicate first)
                     (sequence->exp (clause-actions first))
                     (expand-clauses rest))))))

;; let
;; (let bindings body)
(define (let? exp) (tagged-list? exp 'let))
(define (let-bindings exp) (cadr exp))
(define (let-body exp) (cddr exp))
(define (let-no-bindings? bindings) (null? bindings))
(define (let-first-binding bindings) (car bindings))
(define (let-rest-bindings bindings) (cdr bindings))
(define (let-binding-var binding) (car binding))
(define (let-binding-val binding) (cadr binding))
(define (let->application exp)
  (let* ((bindings (let-bindings exp))
         (body (let-body exp))
         (variables (map let-binding-var bindings))
         (values (map let-binding-val bindings)))
   (cons (make-lambda variables
                      body)
         values)))
(define (make-let bindings body)
  (cons 'let (cons bindings body)))

;; let*
;; (let* bindings body)
(define (let*? exp) (tagged-list? exp 'let*))
(define (let*->let exp)
  (define (transform-bindings bindings)
    (if (let-no-bindings? (let-rest-bindings bindings))
        (make-let (list (let-first-binding bindings))
                  (let-body exp))
        (make-let (list (let-first-binding bindings))
                  (list (transform-bindings (let-rest-bindings bindings))))))
  (if (let-no-bindings? (let-bindings exp))
      (sequence->exp (let-body exp))
      (transform-bindings (let-bindings exp))))

;; letrec
;; (letrec bindings body)
(define (letrec? exp) (tagged-list? exp 'letrec))
(define (letrec->let exp)
  (define (create-empty-bindings vars)
    (map (lambda (var) (list var (list 'quote 'unassigned)))
         vars))
  (define (insert-assignments bindings exps)
    (define (insert-helper bindings)
      (if (null? bindings)
          exps
          (cons (make-assignment (caar bindings)
                                 (cadar bindings))
                (insert-helper (cdr bindings)))))
    (insert-helper bindings))
  (let ((bindings (let-bindings exp))
        (body (let-body exp)))
    (if (let-no-bindings? bindings)
        (sequence->exp body)
        (make-let (create-empty-bindings (map let-binding-var
                                              bindings))
                  (insert-assignments bindings body)))))

;; application
;; (op arg0 arg1 ... argn)
(define (application? exp) (pair? exp))
(define (operator exp) (car exp))
(define (operands exp) (cdr exp))
(define (no-operands? operands) (null? operands))
(define (first-operand operands) (car operands))
(define (rest-operands operands) (cdr operands))
(define (no-exps? exps) (null? exps))
(define (first-exp exps) (car exps))
(define (rest-exps exps) (cdr exps))
(define (list-of-values exps env)
  ;; expressions evaluated from left to right
  (if (no-exps? exps)
      '()
      (let ((first-value (eval (first-exp exps) env)))
        (cons first-value
              (list-of-values (rest-exps exps) env)))))
(define (analyze-application exp)
  (let ((analyzed-operator (analyze (operator exp)))
        (analyzed-operands (map analyze (operands exp))))
    (lambda (env)
      (execute-application (analyzed-operator env)
                           (map (lambda (op) (op env))
                                analyzed-operands)))))
(define (execute-application procedure arguments)
  (cond ((primitive-procedure? procedure)
         (apply-primitive-procedure procedure arguments))
        ((compound-procedure? procedure)
         ((procedure-body procedure)
          (extend-environment (procedure-parameters procedure)
                              arguments
                              (procedure-environment procedure))))
        (else
         (error "Unknown procedure type -- execute-application" procedure))))

;; procedure (value)
;; (procedure parameters body env)
(define (make-procedure parameters body env)
  (list 'procedure parameters body env))
(define (compound-procedure? p)
  (tagged-list? p 'procedure))
(define (procedure-parameters p) (cadr p))
(define (procedure-body p) (caddr p))
(define (procedure-environment p) (cadddr p))

;; environment
(define (enclosing-environment env) (cdr env))
(define (first-frame env) (car env))
(define the-empty-environment '())
(define (make-frame variables values)
  (list (map cons variables values)))
(define (frame-variables frame)
  (map car (car frame)))
(define (frame-values frame)
  (map cdr (car frame)))
(define (add-binding-to-frame! var val frame)
  (set-car! frame (cons (cons var val) (car frame)))
  var)
(define (extend-environment vars vals base-env)
  (let ((var-num (length vars))
        (val-num (length vals)))
    (cond ((= var-num val-num)
           (cons (make-frame vars vals) base-env))
          ((> var-num val-num)
           (error "Too many variables -- extend-environment"))
          (else
           (error "Too many values -- extend-environment")))))
(define (frame-traversal env operation)
  (if (eq? env the-empty-environment)
      (error "nothing found during frame traversal")
      (let ((first-frame-result (operation (first-frame env))))
        (if first-frame-result
            first-frame-result
            (frame-traversal (enclosing-environment env)
                             operation)))))
(define (binding-traversal frame operation)
  (define (helper bindings)
    (if (null? bindings)
        #f
        (let ((first-binding-result (operation (car bindings))))
          (if first-binding-result
              first-binding-result
              (helper (cdr bindings))))))
  (helper (car frame)))
(define (lookup-variable-value var env)
  (car (frame-traversal
         env
         (lambda (frame)
           (binding-traversal
             frame
             (lambda (binding)
               (if (eq? var (car binding))
                   (list (cdr binding))
                   #f)))))))
(define (set-variable-value! var val env)
  (frame-traversal
    env
    (lambda (frame)
      (binding-traversal
        frame
        (lambda (binding)
          (if (eq? var (car binding))
              (begin (set-cdr! binding val)
                     'undefined)
              #f))))))
(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (if (binding-traversal frame
                           (lambda (binding)
                             (if (eq? var
                                      (car binding))
                                 (begin (set-cdr! binding val)
                                        var)
                                 #f)))
        var
        (add-binding-to-frame! var val frame))))

;; primitive
(define (primitive-procedure? proc)
  (tagged-list? proc 'primitive))
(define (primitive-implementation proc) (cadr proc))
(define primitive-procedures
  (list (list '+ +)
        (list '- -)
        (list '* *)
        (list 'quotient quotient)
        (list 'remainder remainder)
        (list 'modulo modulo)
        (list '> >)
        (list '< <)
        (list '= =)
        (list 'not not)
        (list 'car car)
        (list 'cdr cdr)
        (list 'cons cons)
        (list 'append append)
        (list 'null? null?)))
(define (primitive-procedure-names)
  (map car primitive-procedures))
(define (primitive-procedure-objects)
  (map (lambda (proc) (list 'primitive (cadr proc)))
       primitive-procedures))
(define (apply-primitive-procedure proc args)
  (system-apply (primitive-implementation proc)
                args))

;; utils
(define (tagged-list? exp tag)
  (and (pair? exp)
       (eq? (car exp) tag)))
(define (true? x)
  (not (false? x)))
(define (false? x)
  (eq? x #f))

;; setups
(define (setup-environment)
  (let ((initial-env
         (extend-environment (primitive-procedure-names)
                             (primitive-procedure-objects)
                             the-empty-environment)))
    (define-variable! 'true #t initial-env)
    (define-variable! 'false #f initial-env)
    (define-variable! 'undefined 'undefined initial-env)
    initial-env))
(define the-global-environment (setup-environment))
(define (driver-loop)
  (define (prompt-for-input)
    (define input-prompt ">>> ")
    (newline)
    (display input-prompt))
  (define (announce-output)
    (define output-prompt "<<< ")
    (display output-prompt))
  (define (user-print object)
    (if (compound-procedure? object)
        (display (list 'compound-procedure
                       (procedure-parameters object)
                       (procedure-body object)))
        (display object)))
   (prompt-for-input)
   (let ((input (read)))
     (let ((output (force-it (eval input the-global-environment))))
       (announce-output)
       (user-print output)
       (newline)))
   (driver-loop))